# Nome do Workflow
name: Build Windows Executables

# Gatilho: Esta action será executada toda vez que houver um push na branch 'main'.
on:
  push:
    branches: [ "main" ]

# Define os trabalhos (jobs) a serem executados.
jobs:
  build-windows:
    # O trabalho será executado em uma máquina virtual Windows fornecida pelo GitHub.
    runs-on: windows-latest

    # Passos (steps) que compõem o trabalho.
    steps:
      # 1. Baixa o código do seu repositório para a máquina virtual.
      - name: Check out repository
        uses: actions/checkout@v4

      # 2. Configura o ambiente Python na versão especificada.
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11' # Você pode ajustar para a sua versão do Python.

      # 3. Instala todas as dependências do projeto listadas no requirements.txt.
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # 4. Roda as migrações do Django para criar o esquema do banco de dados no arquivo db.sqlite3.
      - name: Run Django Migrations
        run: python manage.py migrate
        shell: bash

      # 5. Cria o superusuário de forma não-interativa.
      # Ele usa os segredos configurados no seu repositório do GitHub para segurança.
      - name: Create Superuser (non-interactive)
        env:
          DJANGO_SUPERUSER_USERNAME: ${{ secrets.ADMIN_USER }}
          DJANGO_SUPERUSER_PASSWORD: ${{ secrets.ADMIN_PASSWORD }}
          DJANGO_SUPERUSER_EMAIL: ${{ secrets.ADMIN_EMAIL }}
        run: python manage.py createsuperuser --noinput
        shell: bash

      # 6. Coleta todos os arquivos estáticos (CSS, JS, etc.) do Django Admin e do Unfold.
      # O --noinput evita que o script peça confirmação.
      - name: Collect Static Files
        run: python manage.py collectstatic --noinput
        shell: bash

      # 7. Compila os dois executáveis usando os arquivos .spec do seu repositório.
      - name: Build Executables with PyInstaller
        run: |
          pyinstaller VideoDisplay.spec
          pyinstaller SetupAdmin.spec
        shell: bash

      # 8. Cria uma pasta 'release' e copia todos os arquivos necessários para a distribuição.
      - name: Package Artifacts
        run: |
          mkdir release
          copy dist\VideoDisplay.exe release\VideoDisplay.exe
          copy dist\SetupAdmin.exe release\SetupAdmin.exe
          copy db.sqlite3 release\db.sqlite3
          echo "Pacote de Display - Instrucoes:" > release/LEIA-ME.txt
          echo "===============================" >> release/LEIA-ME.txt
          echo "" >> release/LEIA-ME.txt
          echo "1. VideoDisplay.exe: Aplicativo principal. Execute para iniciar o painel de controle." >> release/LEIA-ME.txt
          echo "2. db.sqlite3: Banco de dados com um usuario admin pre-configurado. IMPORTANTE: Altere a senha padrao no primeiro acesso!" >> release/LEIA-ME.txt
          echo "3. SetupAdmin.exe: Ferramenta para criar um novo admin. Use-a apenas se voce deletar o arquivo db.sqlite3." >> release/LEIA-ME.txt

      # 9. Faz o upload da pasta 'release' como um "artefato" do GitHub.
      # O resultado será um arquivo .zip que você poderá baixar.
      - name: Upload Release Artifacts
        uses: actions/upload-artifact@v4
        with:
          # O nome do arquivo .zip será, por exemplo, "windows-build-21"
          name: windows-build-${{ github.run_number }}
          path: release/